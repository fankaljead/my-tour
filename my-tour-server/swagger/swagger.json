{
    "swagger": "2.0",
    "info": {
        "title": "beego Test API",
        "description": "beego has a very cool tools to autogenerate documents for your API",
        "version": "1.0.0",
        "termsOfService": "http://beego.me/",
        "contact": {
            "email": "astaxie@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "basePath": "/v1",
    "paths": {
        "/fan/followUser": {
            "post": {
                "tags": [
                    "fan"
                ],
                "description": "follow user",
                "operationId": "FansController.FollowUser",
                "parameters": [
                    {
                        "in": "path",
                        "name": "follower_id",
                        "description": "The user id you want to follow",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{int} models.Fans.Id"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/fan/getAllFollowers": {
            "get": {
                "tags": [
                    "fan"
                ],
                "description": "get all user followers",
                "operationId": "FansController.GetAllFollowers",
                "responses": {
                    "200": {
                        "description": "{map[string]interface{}}"
                    }
                }
            }
        },
        "/fan/unfollowUser": {
            "post": {
                "tags": [
                    "fan"
                ],
                "description": "unfollow user",
                "operationId": "FansController.UnfollowUser",
                "parameters": [
                    {
                        "in": "path",
                        "name": "follower_id",
                        "description": "The user id you want to follow",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{int} models.Fans.Id"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/hobby/": {
            "post": {
                "tags": [
                    "hobby"
                ],
                "description": "add user hobby",
                "operationId": "HobbyController.AddUserHobby",
                "parameters": [
                    {
                        "in": "string",
                        "name": "title",
                        "description": "The hobby you want to add",
                        "schema": {
                            "$ref": "#/definitions/true"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{int} models.UserHobby.Id"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            },
            "delete": {
                "tags": [
                    "hobby"
                ],
                "description": "delete user hobby",
                "operationId": "HobbyController.DeleteUserHobby",
                "parameters": [
                    {
                        "in": "path",
                        "name": "user_hobby_id",
                        "description": "The hobby you want to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{int} models.UserHobby.Id"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/hobby/getAllUserHobbies": {
            "get": {
                "tags": [
                    "hobby"
                ],
                "description": "get all user hobbies",
                "operationId": "HobbyController.GetAllUserHobbies",
                "responses": {
                    "200": {
                        "description": "{map[string]interface{}}"
                    }
                }
            }
        },
        "/object/": {
            "get": {
                "tags": [
                    "object"
                ],
                "description": "get all objects",
                "operationId": "ObjectController.GetAll",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Object"
                        }
                    },
                    "403": {
                        "description": ":objectId is empty"
                    }
                }
            },
            "post": {
                "tags": [
                    "object"
                ],
                "description": "create object",
                "operationId": "ObjectController.Create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The object content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} models.Object.Id"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/object/{objectId}": {
            "get": {
                "tags": [
                    "object"
                ],
                "description": "find object by objectid",
                "operationId": "ObjectController.Get",
                "parameters": [
                    {
                        "in": "path",
                        "name": "objectId",
                        "description": "the objectid you want to get",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Object"
                        }
                    },
                    "403": {
                        "description": ":objectId is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "object"
                ],
                "description": "update the object",
                "operationId": "ObjectController.Update",
                "parameters": [
                    {
                        "in": "path",
                        "name": "objectId",
                        "description": "The objectid you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Object"
                        }
                    },
                    "403": {
                        "description": ":objectId is empty"
                    }
                }
            },
            "delete": {
                "tags": [
                    "object"
                ],
                "description": "delete the object",
                "operationId": "ObjectController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "objectId",
                        "description": "The objectId you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "objectId is empty"
                    }
                }
            }
        },
        "/scenary_spot/addScenarySpot": {
            "post": {
                "tags": [
                    "scenary_spot"
                ],
                "description": "update scenary spot",
                "operationId": "ScenarySpotController.UpdateScenarySpot",
                "parameters": [
                    {
                        "in": "int64",
                        "name": "scenary_spot_id",
                        "description": "The spot scenary_spot_id",
                        "schema": {
                            "$ref": "#/definitions/true"
                        }
                    },
                    {
                        "in": "sting",
                        "name": "name",
                        "description": "The spot name",
                        "schema": {
                            "$ref": "#/definitions/true"
                        }
                    },
                    {
                        "in": "sting",
                        "name": "short_name",
                        "description": "The spot short_name",
                        "schema": {
                            "$ref": "#/definitions/true"
                        }
                    },
                    {
                        "in": "sting",
                        "name": "location",
                        "description": "The spot location",
                        "schema": {
                            "$ref": "#/definitions/true"
                        }
                    },
                    {
                        "in": "sting",
                        "name": "description",
                        "description": "The spot description",
                        "schema": {
                            "$ref": "#/definitions/true"
                        }
                    },
                    {
                        "in": "int64",
                        "name": "scenary_spot_catagory_id",
                        "description": "The spot scenary_spot_catagory_id",
                        "schema": {
                            "$ref": "#/definitions/true"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} models.ScenarySpot.Id"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/scenary_spot/addScenarySpotCatagory": {
            "post": {
                "tags": [
                    "scenary_spot"
                ],
                "description": "create object",
                "operationId": "ScenarySpotController.CreateAScenarySpotCatagory",
                "parameters": [
                    {
                        "in": "sting",
                        "name": "name",
                        "description": "The spot name",
                        "schema": {
                            "$ref": "#/definitions/true"
                        }
                    },
                    {
                        "in": "sting",
                        "name": "description",
                        "description": "The spot description",
                        "schema": {
                            "$ref": "#/definitions/true"
                        }
                    },
                    {
                        "in": "int64",
                        "name": "create_user_id",
                        "description": "The spot create_user_id",
                        "schema": {
                            "$ref": "#/definitions/true"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} models.ScenarySpotCatagory.Id"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/scenary_spot/deleteScenarySpot": {
            "delete": {
                "tags": [
                    "scenary_spot"
                ],
                "description": "delete scenary spot",
                "operationId": "ScenarySpotController.DeleteScenarySpot",
                "parameters": [
                    {
                        "in": "path",
                        "name": "scenary_spot_id",
                        "description": "The scenary spot you want to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{int} models.ScenarySpot.Id"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/scenary_spot/deleteScenarySpotCatagory": {
            "delete": {
                "tags": [
                    "scenary_spot"
                ],
                "description": "delete scenary spot catagory",
                "operationId": "ScenarySpotController.DeleteScenarySpotCatagory",
                "parameters": [
                    {
                        "in": "path",
                        "name": "scenary_spot_catagory_id",
                        "description": "The scenary spot catagory you want to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{int} models.ScenarySpotCatagory.Id"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/scenary_spot/getScenarySpot": {
            "get": {
                "tags": [
                    "scenary_spot"
                ],
                "description": "get scenary spot",
                "operationId": "ScenarySpotController.GetScenarySpot",
                "parameters": [
                    {
                        "in": "int64",
                        "name": "scenary_spot_id",
                        "description": "The scenary spot id",
                        "schema": {
                            "$ref": "#/definitions/true"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ScenarySpot"
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/scenary_spot/getScenarySpotCatagory": {
            "get": {
                "tags": [
                    "scenary_spot"
                ],
                "description": "get scenary spot catagory",
                "operationId": "ScenarySpotController.GetScenarySpotCatagory",
                "parameters": [
                    {
                        "in": "int64",
                        "name": "pase_size",
                        "description": "The page size",
                        "schema": {
                            "$ref": "#/definitions/true"
                        }
                    },
                    {
                        "in": "int64",
                        "name": "page_index",
                        "description": "The page index",
                        "schema": {
                            "$ref": "#/definitions/true"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} models.ScenarySpotCatagory"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/scenary_spot/getScenarySpots": {
            "get": {
                "tags": [
                    "scenary_spot"
                ],
                "description": "get scenary spots",
                "operationId": "ScenarySpotController.GetScenarySpots",
                "parameters": [
                    {
                        "in": "int64",
                        "name": "pase_size",
                        "description": "The page size",
                        "schema": {
                            "$ref": "#/definitions/true"
                        }
                    },
                    {
                        "in": "int64",
                        "name": "page_index",
                        "description": "The page index",
                        "schema": {
                            "$ref": "#/definitions/true"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} models.ScenarySpot"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/scenary_spot/getScenarySpotsShortInfo": {
            "get": {
                "tags": [
                    "scenary_spot"
                ],
                "description": "get scenary spots short info",
                "operationId": "ScenarySpotController.GetScenarySpotsShortInfo",
                "parameters": [
                    {
                        "in": "int64",
                        "name": "pase_size",
                        "description": "The page size",
                        "schema": {
                            "$ref": "#/definitions/true"
                        }
                    },
                    {
                        "in": "int64",
                        "name": "page_index",
                        "description": "The page index",
                        "schema": {
                            "$ref": "#/definitions/true"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{objec} models.ScenarySpot"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/table/": {
            "post": {
                "tags": [
                    "table"
                ],
                "description": "create table",
                "operationId": "TableController.CreateTable",
                "responses": {
                    "200": {
                        "description": "{int}"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/travel_note/": {
            "post": {
                "tags": [
                    "travel_note"
                ],
                "description": "add travel note",
                "operationId": "TravelNoteController.UpdateTravelNote",
                "parameters": [
                    {
                        "in": "path",
                        "name": "title",
                        "description": "true",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "content",
                        "description": "true",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "cover",
                        "description": "true",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "publishTime",
                        "description": "true",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "travel_note_id",
                        "description": "true",
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{int} models.TravelNote.Id"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            },
            "delete": {
                "tags": [
                    "travel_note"
                ],
                "description": "delete travel note by id",
                "operationId": "TravelNoteController.DeleteTravelNote",
                "parameters": [
                    {
                        "in": "path",
                        "name": "travel_note_id",
                        "description": "The travel note you want to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{int} models.TravelNote.Id"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/travel_note/add_travel_routine": {
            "post": {
                "tags": [
                    "travel_note"
                ],
                "description": "add travel note 新增旅游路线",
                "operationId": "TravelNoteController.AddTravelRoutine",
                "parameters": [
                    {
                        "in": "path",
                        "name": "title",
                        "description": "true",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "content",
                        "description": "true",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "cover",
                        "description": "true",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "publishTime",
                        "description": "true",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{int} models.TravelNote.Id"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/travel_note/getAllTravelNoteInfo": {
            "get": {
                "tags": [
                    "travel_note"
                ],
                "description": "get travel all note by user id",
                "operationId": "TravelNoteController.GetAllTravelNoteInfoByUserId",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TravelNote"
                        }
                    },
                    "403": {
                        "description": "travel note info is empty"
                    }
                }
            }
        },
        "/travel_note/publishTravelNote": {
            "post": {
                "tags": [
                    "travel_note"
                ],
                "description": "publish travel note",
                "operationId": "TravelNoteController.PublishTravelNoteDraft",
                "parameters": [
                    {
                        "in": "int64",
                        "name": "travel_note_id",
                        "description": "body for user content",
                        "schema": {
                            "$ref": "#/definitions/true"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{int}"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/travel_note/setTravelNoteDraft": {
            "post": {
                "tags": [
                    "travel_note"
                ],
                "description": "set travel note as draft",
                "operationId": "TravelNoteController.SetTravelNoteDraft",
                "parameters": [
                    {
                        "in": "int64",
                        "name": "travel_note_id",
                        "description": "body for user content",
                        "schema": {
                            "$ref": "#/definitions/true"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{int}"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/travel_note/{travel_note_id}": {
            "get": {
                "tags": [
                    "travel_note"
                ],
                "description": "get travel note by travel note id",
                "operationId": "TravelNoteController.GetTravelNoteById",
                "parameters": [
                    {
                        "in": "path",
                        "name": "travel_note_id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TravelNote"
                        }
                    },
                    "403": {
                        "description": ":uid is empty"
                    }
                }
            }
        },
        "/user/": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "get all Users",
                "operationId": "UserController.GetAll",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "user"
                ],
                "description": "create users",
                "operationId": "UserController.CreateUser",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for user content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{int} models.User.Id"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/user/login": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "Logs user into the system",
                "operationId": "UserController.Login",
                "parameters": [
                    {
                        "in": "query",
                        "name": "username",
                        "description": "The username for login",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "password",
                        "description": "The password for login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} login success"
                    },
                    "403": {
                        "description": "user not exist"
                    }
                }
            }
        },
        "/user/logout": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "Logs out current logged in user session",
                "operationId": "UserController.logout",
                "responses": {
                    "200": {
                        "description": "{string} logout success"
                    }
                }
            }
        },
        "/user/{uid}": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "get user by uid",
                "operationId": "UserController.Get",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "403": {
                        "description": ":uid is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "user"
                ],
                "description": "update the user",
                "operationId": "UserController.Update",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "The uid you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for user content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "403": {
                        "description": ":uid is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "user"
                ],
                "description": "delete the user",
                "operationId": "UserController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "The uid you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{int} 1 delete success!"
                    },
                    "403": {
                        "description": "0 uid is empty"
                    }
                }
            }
        },
        "/user_info/": {
            "get": {
                "tags": [
                    "user_info"
                ],
                "description": "get all Users information",
                "operationId": "UserInfoController.GetAll",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.UserInfo"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "user_info"
                ],
                "description": "create user information",
                "operationId": "UserInfoController.UpdateUserInfo",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for user_info content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{int} models.UserInfo.Id"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/user_info/set_background_image": {
            "post": {
                "tags": [
                    "user_info"
                ],
                "description": "set background image for this user",
                "operationId": "UserInfoController.Set Background Image",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uploadname",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "file"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{int} 1"
                    },
                    "403": {
                        "description": "file is empty"
                    }
                }
            }
        },
        "/user_info/set_icon": {
            "post": {
                "tags": [
                    "user_info"
                ],
                "description": "set icon for this user",
                "operationId": "UserInfoController.Set Head Icon",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uploadname",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "file"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{int} 1"
                    },
                    "403": {
                        "description": "file is empty"
                    }
                }
            }
        },
        "/user_info/{user_id}": {
            "get": {
                "tags": [
                    "user_info"
                ],
                "description": "get user_info by user_id",
                "operationId": "UserInfoController.Get",
                "parameters": [
                    {
                        "in": "path",
                        "name": "user_id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.UserInfo"
                        }
                    },
                    "403": {
                        "description": ":uid is empty"
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Object": {
            "title": "Object",
            "type": "object",
            "properties": {
                "ObjectId": {
                    "type": "string"
                },
                "PlayerName": {
                    "type": "string"
                },
                "Score": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.ScenarySpot": {
            "title": "ScenarySpot",
            "type": "object",
            "properties": {
                "background": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "editTime": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "scenary_spot_catagory_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "score": {
                    "type": "number",
                    "format": "double"
                },
                "shortName": {
                    "type": "string"
                }
            }
        },
        "models.TravelNote": {
            "title": "TravelNote",
            "type": "object",
            "properties": {
                "author_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "content": {
                    "type": "string"
                },
                "cover": {
                    "type": "string"
                },
                "creat_time": {
                    "type": "string"
                },
                "draft": {
                    "type": "boolean"
                },
                "latitude": {
                    "type": "string"
                },
                "longitude": {
                    "type": "string"
                },
                "place": {
                    "type": "string"
                },
                "publish_time": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "travel_note_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "travel_note_topic_id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.User": {
            "title": "User",
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.UserInfo": {
            "title": "UserInfo",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "background_image": {
                    "type": "string"
                },
                "birthday": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "head_icon": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "personalized_signature": {
                    "type": "string"
                },
                "qq": {
                    "type": "string"
                },
                "tel": {
                    "type": "string"
                },
                "update_time": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "wechat": {
                    "type": "string"
                }
            }
        },
        "true": {
            "title": "true",
            "type": "object"
        }
    },
    "tags": [
        {
            "name": "object",
            "description": "Operations about object\n"
        },
        {
            "name": "user",
            "description": "Operations about Users\n"
        },
        {
            "name": "user_info",
            "description": "Operations about UserInfo\n"
        },
        {
            "name": "hobby",
            "description": "Operations about UserInfo\n"
        }
    ]
}